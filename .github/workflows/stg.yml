name: Deploy

on:
  push:
    branches: [main]
    tags:
      - "**-stg"

env:
  REGION: sa-east-1
  SERVICE: event-boilerplate
  ECR_ALIAS: main
  ENV: stg

jobs:
  deploy-consumer:
    if: true

    env:
      APPLICATION: consumer

    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Install dependencies
        run: |
          yarn
          yarn add typescript

      - name: Compile project
        run: |
          yarn workspace @event-boilerplate/${{ env.APPLICATION }} compile

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_ALIAS }}-${{ env.ENV }}
          IMAGE_NAME: ${{ env.SERVICE }}-${{ env.APPLICATION }}-${{ env.ENV }}
        run: |
          yarn docker:build -s ${{ env.APPLICATION }} -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_NAME }}_latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_NAME }}_latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_NAME }}_latest"

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.SERVICE }}-${{ env.APPLICATION }}-${{ env.ENV }} --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: render-main-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.APPLICATION }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-main-container.outputs.task-definition }}
          service: ${{ env.SERVICE }}-${{ env.APPLICATION }}-${{ env.ENV }}
          cluster: ${{ env.SERVICE }}-${{ env.ENV }}
          wait-for-service-stability: true

  deploy-worker:
    if: true

    env:
      APPLICATION: worker

    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Install dependencies
        run: |
          yarn
          yarn add typescript

      - name: Compile project
        run: |
          yarn workspace @event-boilerplate/${{ env.APPLICATION }} compile

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_ALIAS }}-${{ env.ENV }}
          IMAGE_NAME: ${{ env.SERVICE }}-${{ env.APPLICATION }}-${{ env.ENV }}
        run: |
          yarn docker:build -s ${{ env.APPLICATION }} -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_NAME }}_latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_NAME }}_latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_NAME }}_latest"

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.SERVICE }}-${{ env.APPLICATION }}-${{ env.ENV }} --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: render-main-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.APPLICATION }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-main-container.outputs.task-definition }}
          service: ${{ env.SERVICE }}-${{ env.APPLICATION }}-${{ env.ENV }}
          cluster: ${{ env.SERVICE }}-${{ env.ENV }}
          wait-for-service-stability: true

  deploy-notification:
    if: true

    env:
      APPLICATION: notification

    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Install dependencies
        run: |
          yarn
          yarn add typescript

      - name: Compile project
        run: |
          yarn workspace @event-boilerplate/${{ env.APPLICATION }} compile

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_ALIAS }}-${{ env.ENV }}
          IMAGE_NAME: ${{ env.SERVICE }}-${{ env.APPLICATION }}-${{ env.ENV }}
        run: |
          yarn docker:build -s ${{ env.APPLICATION }} -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_NAME }}_latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_NAME }}_latest
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_NAME }}_latest"

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.SERVICE }}-${{ env.APPLICATION }}-${{ env.ENV }} --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: render-main-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.APPLICATION }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-main-container.outputs.task-definition }}
          service: ${{ env.SERVICE }}-${{ env.APPLICATION }}-${{ env.ENV }}
          cluster: ${{ env.SERVICE }}-${{ env.ENV }}
          wait-for-service-stability: true

  deploy-lambda:
    if: true

    env:
      APPLICATION: api
      WORKING_DIRECTORY: ./services/api

    defaults:
      run:
        working-directory: ${{env.WORKING_DIRECTORY}}

    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{env.REGION}}

      - name: Install typescript
        run: |
          yarn add typescript

      - name: Install Dependencies
        run: |
          yarn
      
      - name: Compile project
        run: |
          yarn compile
      
      - name: Zip release
        run: |
          zip -r release.zip node_modules build

      - name: Update lambda
        run: |
          aws lambda update-function-code \
            --function-name ${{ env.SERVICE }}-api-${{ env.ENV }} \
            --zip-file fileb://release.zip \
            --publish